// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    // Following used for Azure B2C
    refresh_token_expires_in Int?    @db.Int
    not_before               Int?    @db.Int
    id_token_expires_in      Int?    @db.Int
    profile_info             String? @db.Text

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String             @id @default(cuid())
    name               String?
    email              String?            @unique
    emailVerified      DateTime?
    image              String?
    academicYear       String?
    academicMajor      String?
    academicUniversity String?
    graduationYear     String?
    city               String?
    state              String?
    phone              String?
    birthday           DateTime?
    onboarded          Boolean            @default(false)
    accounts           Account[]
    sessions           Session[]
    posts              Post[]
    credentials        Credentials?
    organizations      UserOrganization[]
    events             EventAttendee[]
    Event              Event[]
}

model Organization {
    id           String             @id @default(cuid())
    name         String
    username     String             @unique
    private      Boolean            @default(false)
    university   String
    addressLine1 String?
    addressLine2 String?
    city         String
    state        String
    zip          String?
    description  String?
    joinCode     String             @unique
    logoUrl      String
    logoKey      String
    bannerUrl    String
    bannerKey    String
    users        UserOrganization[]
    roles        Role[]
    events       Event[]
    categories   EventCategory[]
}

model UserOrganization {
    id             String       @id @default(cuid())
    userId         String
    organizationId String
    roleId         String?
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    role           Role?        @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([userId, organizationId])
    @@index([userId])
    @@index([organizationId])
    @@index([roleId])
}

model Credentials {
    id        String   @id @default(cuid())
    username  String   @unique
    password  String
    createdAt DateTime @default(now())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    id             String             @id @default(cuid())
    name           String
    description    String?
    organizationId String
    organization   Organization       @relation(fields: [organizationId], references: [id])
    users          UserOrganization[]

    @@index([organizationId])
}

model Event {
    id             String              @id @default(cuid())
    name           String
    description    String?
    startTime      DateTime
    endTime        DateTime
    startDate      DateTime
    endDate        DateTime
    repeatPattern  String? // Custom format to indicate repetition
    open           Boolean             @default(false) // open for anyone in the organization to join
    slots          Int? // Null for unlimited
    createdById    String
    createdBy      User                @relation(fields: [createdById], references: [id])
    location       Location?           @relation(fields: [locationId], references: [id])
    locationId     String?
    organizationId String
    organization   Organization        @relation(fields: [organizationId], references: [id])
    attendees      EventAttendee[]
    categories     EventCategoryLink[]

    @@index([organizationId])
    @@index([locationId])
    @@index([createdById])
}

model EventCategoryLink {
    id         String        @id @default(cuid())
    eventId    String
    event      Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
    categoryId String
    category   EventCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@unique([eventId, categoryId])
    @@index([eventId])
    @@index([categoryId])
}

model EventCategory {
    id             String              @id @default(cuid())
    name           String
    organizationId String
    organization   Organization        @relation(fields: [organizationId], references: [id])
    events         EventCategoryLink[]

    @@unique([name, organizationId])
    @@index([organizationId])
}

model Location {
    id        String  @id @default(cuid())
    online    Boolean
    onlineUrl String?
    location  String?
    events    Event[]
}

model EventAttendee {
    id       String  @id @default(cuid())
    userId   String
    eventId  String
    user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    event    Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
    status   String // Example: 'Confirmed', 'Pending'
    required Boolean

    @@unique([userId, eventId])
    @@index([eventId])
}
